"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkVerifyStatus = exports.verifySourceCode = void 0;
const axios_1 = __importDefault(require("axios"));
const MainnetScanUrl = 'https://api.confluxscan.net';
const TestnetScanUrl = 'https://api-testnet.confluxscan.net';
// Scan contract verify openapi @see https://api-testnet.confluxscan.net/doc
/**
 * Valid codes 1-14 where
    1 - No License (None)
    2 - The Unlicense (Unlicense)
    3 - MIT License (MIT)
    4 - GNU General Public License v2.0 (GNU GPLv2)
    5 - GNU General Public License v3.0 (GNU GPLv3)
    6 - GNU Lesser General Public License v2.1 (GNU LGPLv2.1)
    7 - GNU Lesser General Public License v3.0 (GNU LGPLv3)
    8 - BSD 2-clause 'Simplified' license (BSD-2-Clause)
    9 - BSD 3-clause 'New' Or 'Revised' license* (BSD-3-Clause)
    10 - Mozilla Public License 2.0 (MPL-2.0)
    11 - Open Software License 3.0 (OSL-3.0)
    12 - Apache 2.0 (Apache-2.0)
    13 - GNU Affero General Public License (GNU AGPLv3)
    14 - Business Source License (BSL 1.1)
 */
var LicenseType;
(function (LicenseType) {
    LicenseType[LicenseType["No"] = 1] = "No";
    LicenseType[LicenseType["Unlicense"] = 2] = "Unlicense";
    LicenseType[LicenseType["MIT"] = 3] = "MIT";
    LicenseType[LicenseType["GPL_v2"] = 4] = "GPL_v2";
    LicenseType[LicenseType["GPL_v3"] = 5] = "GPL_v3";
    LicenseType[LicenseType["LGPL_v2_1"] = 6] = "LGPL_v2_1";
    LicenseType[LicenseType["LGPL_v3"] = 7] = "LGPL_v3";
    LicenseType[LicenseType["BSD_2_Clause"] = 8] = "BSD_2_Clause";
    LicenseType[LicenseType["BSD_3_Clause"] = 9] = "BSD_3_Clause";
    LicenseType[LicenseType["MPL_2_0"] = 10] = "MPL_2_0";
    LicenseType[LicenseType["OSL_3_0"] = 11] = "OSL_3_0";
    LicenseType[LicenseType["Apache_2_0"] = 12] = "Apache_2_0";
    LicenseType[LicenseType["AGPL_v3"] = 13] = "AGPL_v3";
    LicenseType[LicenseType["BSC_1_1"] = 14] = "BSC_1_1";
})(LicenseType || (LicenseType = {}));
function getScanApiUrl(networkId) {
    if (networkId === 1)
        return TestnetScanUrl;
    return MainnetScanUrl;
}
/**
 Success:
 {
    code: 0,
    message: 'OK',
    data: '00d290cca9978af20a24994a2e0c4ca415266216ee4e2b3c21'
 }

 Fail:
 { code: 1, message: 'compiler version 0.8.15 not exits' }
 */
async function verifySourceCode(options) {
    const { networkId, ...verifyMeta } = options;
    const url = getScanApiUrl(networkId);
    let compilerVersions = await getCompilerList();
    const completeVersion = compilerVersions[options.compilerversion];
    if (!completeVersion) {
        throw new Error(`compiler version ${options.compilerversion} not exits`);
    }
    verifyMeta.compilerversion = completeVersion;
    const { data } = await axios_1.default.post(`${url}/contract/verifysourcecode`, verifyMeta);
    return data;
}
exports.verifySourceCode = verifySourceCode;
async function checkVerifyStatus(guid, networkId) {
    const url = getScanApiUrl(networkId);
    return await axios_1.default.get(`${url}/contract/checkverifystatus?guid=${guid}`);
}
exports.checkVerifyStatus = checkVerifyStatus;
async function getCompilerList() {
    const url = 'https://confluxscan.net/v1/contract/compiler';
    const { data: versions } = await axios_1.default.get(url);
    return versions;
}
//# sourceMappingURL=scan-cli.js.map